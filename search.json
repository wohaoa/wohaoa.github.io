[{"title":"Hexo+Github Page与gitee Page搭建","url":"/2020/11/06/Hexo-Github-Page%E4%B8%8Egitee-Page%E6%90%AD%E5%BB%BA/","content":"一、环境配置由于我们选择在Windows 10平台上使用Gitee+Hexo来搭建个人博客，且网站/博客本质上是一个资源目录，其中包含了显示的页面文本与调用的样式（CSS等）文件，因此我们需要首先在本地建立一个存储个人网站的目录，如命名为MyWebDir。接下来，我们就需要安装两个重要的环境，一个是提供版本克隆与下载跟踪的Git，一个是由文本文件生成HTML文件的Hexo框架，其中： \n\nnode.js下载可以从其官方界面开始https://nodejs.org/zh-cn/ \nGit下载则可以从其官方界面开始https://git-scm.com/\n\n上述安装下载后按照指示安装即可，安装成功在MyWeb中单击空白右键，应能弹出启动Git Bash Here的选项。在命令行中输入相应命令验证是否成功，如果成功会有相应的版本号。\ngit version node -v npm -v\n二、Hexo的安装与基本命令接下来我们可以安装生成网站的关键——Hexo架构了，其主要信息和安装命令、主题等都可以从其官网轻松得到：https://hexo.io/zh-cn/为了安装Hexo，只需要在MyWeb目录中单击右键启动Git Bash Here，然后输入命令：npm install hexo-cli -g安装 Hexo 完成后，再执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。\nhexo init myBlog cd myBlog npm install\n新建完成后，指定文件夹的目录如下：\n├── _config.yml # 网站的配置信息，您可以在此配置大部分的参数。 ├── package.json ├── scaffolds # 模版文件夹 ├── source # 资源文件夹，除 _posts 文件，其他以下划线_开头的文件或者文件夹不会被编译打包到public文件夹 | \t\t\t├── _drafts # 草稿文件 | \t\t\t└── _posts # 文章Markdowm文件\t\t└── themes # 主题文件夹\n好了，如果上面的命令都没报错的话，就恭喜了，运行 hexo s 命令，其中 s 是 server 的缩写，在浏览器中输入 http://localhost:4000 回车就可以预览效果了。\nhexo clean # 清空已有hexo网站文件 hexo generate(or g) # 依据网页文本与新的CSS样式生成新网站文件 hexo server(or s) # 启动本地服务器，可以在localhost:4000查看网站修改效果 \n依次运行上述三个命令，就可以在浏览器打开localhost:4000端口，查看对应网站界面效果，一般默认的是一个landscape主题，后期当提交新文章或者新的样式修改时，往往都是先从本地查看结果无误后再部署到Gitee Page。\n三、主题下载与安装主题使用ils主题，具体设置参见：https://github.com/XPoet/hexo-theme-ils\n四、 配置 SSH key要使用 git 工具首先要配置一下SSH key，为部署本地博客到 Github和gitee 做准备。\n打开命令行输入 cd ~/.ssh 如果没报错或者提示什么的说明就是以前生成过的，直接使用 cat ~/.ssh/id_rsa.pub 命令就是可以查看本机上的 SSH key 了。\ncat ~/.ssh/id_rsa.pub\n如果之前没有创建，则执行以下命令全局配置一下本地账户：\ngit config --global user.name &quot;用户名&quot;git config --global user.email &quot;邮箱地址&quot;\n然后开始生成密钥 SSH key\nssh-keygen -t rsa -C &#x27;上面的邮箱&#x27;\n按照提示完成三次回车，即可生成 ssh key。通过查看 ~/.ssh/id_rsa.pub 文件内容，获取到你的 SSH key首次使用还需要确认并添加主机到本机SSH可信列表。若返回 Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 内容，则证明添加成功。\nssh -T git@github.com\n\n到这还没完，还要登录 Github 上添加刚刚生成的SSH key，按以下步骤添加：\n创建一个新的 SSH key, 标题随便，key 就填刚才生成那个，确认创建，搞定！！这样在你的 SSH keys 列表里就会看到你刚刚添加的密钥。\n第四、新建github与gitee仓库github PageGithub 仅能使用一个同名仓库的代码托管一个静态站点，这个网上很多教程没说到的，gitee也是同理。另外在代码到github后，需要在Settings–&gt;Options–&gt;GitHub Pages中更改分支如下图，以为现在github现在主分支已经是main而不是master，所以配置不正确有可能无法正常显示。gitee page你的URL并不是你所在仓库的地址，而应该是你启动仓库的Gitee Page服务后分配给你的网站静态域名，以个人为例，仓库地址为：https://gitee.com/mcube_qing/mcube_qing.git（新建的网站名称与Gitee账号同名），而网站URL应为“服务--Gitee Page”启动/更新后显示的网站地址：http://mcube_qing.gitee.io，像GitHub Page一样强制要求使用账号同名新建网站仓库，即可同时同步github与gitee。\n五、部署到 Github与gitee第一：要安装一个部署插件 hexo-deployer-git。\nnpm install hexo-deployer-git --save\n第二：打开项目根目录下的 _config.yml 配置文件配置参数。拉到文件末尾，填上如下配置：第三、最后执行以下命令就可以部署上传啦，以下 g 是 generate 缩写，d 是 deploy 缩写：\nhexo g -d\n稍等一会，在浏览器访问网址： https://你的用户名.github.io 就会看到你的博客啦！！\n新建文章博客搭好了，就开始写文章了，这里简单介绍一下，详细的文档可以看 hexo 官网。新建文章，输入以下命令即可\nhexo new &#x27;文章标题&#x27;\n\n执行完成后可以在 /source/_posts 下看到一个“文章标题.md”的文章文件啦。.md 就是 Markdown 格式的文件，具体用法可以在网上找一下，语法还是比较简单的。\n在 Markdown 文章里面输入你的文章内容再执行一下以下命令\nhexo ghexo s\n\n就可以本地浏览器输入http://localhost:4000/看到文章在博客显示了最后，部署到 Github与gitee！\nhexo cleanhexo cleanhexo g -d\n部署前最好能先执行一下 hexo clean 命令，清除缓存文件 (db.json) 和已生成的静态文件 (public)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。\n另外，如果你的文章暂时不发布可以先保存在草稿里面。生成草稿的方法和文章差不多 hexo new draft “文章标题”，生成后会在 /source/_drafts 里看到你的草稿文章。当你想发布时只要执行 publish 命令即可发布到博客。\nhexo publish [layout] &lt;filename&gt;\n\n参考：基于Gitee+Hexo搭建个人博客超详细Hexo+Github Page搭建技术博客教程【持续更新】viline在Hexo 中使用的主题推荐\n","categories":["杂项"],"tags":["工具类","环境搭建"]},{"title":"Hello World","url":"/2020/11/16/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new &quot;My New Post&quot;\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\n"},{"title":"蓝牙基础篇(一)---何为蓝牙","url":"/2020/11/13/%E8%93%9D%E7%89%99%E5%9F%BA%E7%A1%80%E7%AF%87(%E4%B8%80)%20%E4%BD%95%E4%B8%BA%E8%93%9D%E7%89%99/","content":"前言蓝牙系列文章属于一个边写边研究的过程，写了三篇之后才意识到对于蓝牙从来都没有一个整体宏观的介绍，所以本文作为前言篇，写这篇文章的目的是完善蓝牙系列博文，并给大家一个对蓝牙的整体认知。\n在你进入蓝牙世界之前，先带你飞到太空整体俯视一下蓝牙这个小星球，了解它的形状，用途等等。从宏观的角度来审视这项神秘的技术。也属于蓝牙系列文章的开篇。毕竟一篇好的文章不仅仅是要做到细枝末节（很显然，我距离这个还很远），也要对整体的轮廓做个概述。先是要明白蓝牙究竟是什么，有什么用，为什么要用它，这些功能又是如何实现的等等。学习过程亦是如此。\n如果对一个东西没有个整体印象那么又怎么能明确你所学习和掌握的跟它有没有关系呢？技术这种东西，如果没人分享造成断层，那么后人又如何才能将之发扬光大呢？？！！所以，谨以此文，献给技术。\n命名渊源首先要问，为什么要叫做蓝牙——Bluetooth即名字由来\nBluetooth这个名字并不带任何技术性，它既不是缩写也不代表任何东西。据悉是来自于一名丹麦国王 (Harald Blåtand)，他有两件举世闻名的事件，一是在958年统一了丹麦和挪威，二是他的坏牙是深蓝/灰色的（也因此有了Bluetooth这个别称）。\n在1996年的某一天，三大行业领袖因特尔、爱立信和诺基亚开会计划建立支持不同产业和行业之间短距离的无线通信标准，在会议上来自因特尔的Jim Kardash建议使用Bluetooth作为临时代码别称，Jim Kardash说“ Harald Bluetooth国王因统一了各战乱派而闻名，就像我们计划借助短距离无线连接来联合PC和电话行业”。也即因此，沿用了丹麦国王的名字。照这么说来，如果蓝牙是由中国人发明的话那就应该称之为秦始皇，毕竟统一了六国呀，开个玩笑。\n但在不久之后，需要为Bluetooth重新赋予一个严肃的名字。当时给出了两个选择一是RadioWire （无线)，二是PAN（个人局域网）。当时优先考虑PAN这个名字，但是调查后发现PAN已经在互联网上出现了成千上万次，所以就给否定了。而RadioWire又因为商标无法及时发布导致被弃用，别无选择，Bluetooth又成了唯一…\n很庆幸当时否定了pan，跟Bluetooth相比，pan简直是太难听了。 也因此Bluetooth成为了短距离无线通信的代名词。\n而蓝牙的图标则取决于符文（Hagall）（ᚼ）和（Bjarkan）（ᛒ），首字母正好是丹麦国王Harald的缩写\n何为蓝牙那么蓝牙是什么呢？？\n蓝牙是一种低功耗的无线连接技术，是一种设备间短距离的无线通讯方式，这句话表明以下几个信息，\n\n低耗能技术\n蓝牙跨设备通信\n蓝牙属于短距离通信方式\n蓝牙是一种无线通信方式，既然是无线通信那么势必需要通讯协议标准即蓝牙通信协议\n\n长期以来，看到蓝牙众多的配置文件和协议一直都很乱，其实蓝牙在使用时总共有三种功能\n\n跨设备传输流式音频\n跨设备传输数据\n广播信息\n\n对于一个蓝牙新手来说，首先一定要明白，蓝牙技术有两种类型、三种通信方式。在研究时一定要先明白自己研究的是蓝牙的什么技术，什么通信方式。\n我所说的两种技术就是平常所说的传统蓝牙和ble低功耗蓝牙，这两种技术类型对比如下：\nBasic Rate/Enhanced Data Rate (BR/EDR)基本速率/增强数据速率即所谓的传统蓝牙技术（蓝牙版本2.0/2.1）：仅支持P2P一种通信方式，即1：1设备间通信，具有持续无线连接、优化音频流的特点，所以是蓝牙耳机、蓝牙扬声器等音频传输的理想方案Low Energy (LE)低功耗即所谓的新型的低功耗蓝牙技术（蓝牙版本4.0/4.1/4.2/4.3），支持三种通信方式：第一，P2P(point-to-point)（点对点）:1:1支持短时间无限连接，优化了数据传输能量消耗，可用于无线键盘、无线鼠标等。第二，broadcast（广播信息）:1:m。可以实现本地化信息共享。广播信息顾名思义，一设备广播信息，其他对该信息感兴趣的设备接受该信息并进行处理。比如beacon。第三，mesh(网格):m:m\n三种通信方式即三种拓扑结构对比：两种蓝牙技术对比：既然蓝牙技术有两种类型，那么按照排列组合也自然而然可以明白当前市面上目前为什么会有三种蓝牙规格了，说白了也就是有三种蓝牙设备模块，不同之处就在于所搭载的蓝牙技术。一般手机都是蓝牙双模的。\n搭载蓝牙BR/EDR：       传统蓝牙模块，建立相对较短距离的持续无线连接，因此非常适用于流式音频等应用。搭载蓝牙LE：       可建立短时间的长距离无线电连接，非常适用于无需持续连接但依赖电池具有较长寿命的的物联网 (IoT) 应用。搭载双模蓝牙：       同时大袋蓝牙le和传统蓝牙两种技术。双模芯片可支持需要连接 BR/EDR 设备（例如音频耳机）以及 LE 设备（例如穿戴设备或零售信标）的单一设备（例如智能手机或平板电脑）。\n按照版本来说，蓝牙又分为好多版本,常见的比如2.0/2.1/4.0/4.1/4.2/4.3，不同的版本会有不同的蓝牙规格，以及蓝牙的数据传输速率、蓝牙通信距离等都有所不同。\n对于作者来说，从研究条件以及自身兴趣点出发，我会去研究双模蓝牙。每种蓝牙规格有不同的蓝牙规范，蓝牙规范是什么呢？蓝牙规范包含两部分\n一部分是应用层协议，比如hfp，a2dp等等各种profile上层配置文件，称之为蓝牙应用层规范另一部分就是蓝牙的核心规范–BluetoothCoreSpecification,蓝牙sig官网有各个版本对应的核心规范规格书，大家可以自行下载。\n蓝牙应用那么蓝牙的应用场景呢？ 蓝牙的应用到底有多广泛呢？用一组数据告诉你：蓝牙已经整合到了超过 30,000 个蓝牙 SIG成员生产的 82 亿件产品中。蓝牙应用已经渗透到了生活的方方面面\n汽车：车载蓝牙，免提呼叫，蓝牙播放音频。全球 12 家主要汽车制造商全部都提供蓝牙免提呼叫系统。智能家居，实现家居自动化，零售位置导向式服务等等。\n总结文章看到这里，你应该已经搞明白了蓝牙是什么，有什么功能，有什么技术，有什么通信方式，在什么地方用到。研究到这里，就应该研究一下蓝牙的组成了。\n不同种类的蓝牙模块即不同规格的蓝牙具有不同的系统结构。但也有一些共通的：包含射频收发器、基带和协议栈。有关于蓝牙的协议介绍留在下一篇。\n蓝牙的应用已经不再是趋势的问题了，绝对是一个好的研究方向，各位加油吧。\n文章很短，你看完了么？对蓝牙有概念性的认识了吗？问一下自己蓝牙到底是什么，有什么用，该如何着手研究。\n转载自知乎：https://zhuanlan.zhihu.com/p/54073576\n","categories":["蓝牙"],"tags":["蓝牙","物联网","BLE"]},{"title":"蓝牙基础篇（二）---蓝牙组成","url":"/2020/11/13/%E8%93%9D%E7%89%99%E5%9F%BA%E7%A1%80%E7%AF%87(%E4%BA%8C)%20%E8%93%9D%E7%89%99%E7%BB%84%E6%88%90/","content":"蓝牙模块共有三大部分组成：\n\nHost：主机，L2CAP以及L2CAP以上\nController ：控制器，HCI以下\nHCI：主机控制接口，传输主机host和controller之间的接口，记录了从host到controller的commands命令以及controller到host的响应events\n\n每个蓝牙芯片包含唯一的一个host，以及唯一的一个主控制器Primary Controller 和0个或者多一个的从控制器Secondary Controller。也就是说host只能有一个，但是controller可以有多个\n而蓝牙的controller控制器共有三种：\n\nBR/EDR controller：在蓝牙芯片中只能作为主控制器\nLE controller : 只能作为主控制器\nAMP controller：只能作为从控制器，且可以有一个或多个\n\n其实还有一种控制器那就是BR/EDR和LE控制器结合起来的双模控制器。那么根据控制器的类型以及组合规则可以看到，蓝牙核心系统有以下几种组合情况。从图片中可以看到共有七大类，那么平常所说的蓝牙属于传统蓝牙还是ble蓝牙是什么意思呢？这说的就是蓝牙的规格，而蓝牙规格也是由主控制器PrimaryController决定的。从图中可以看出蓝牙主控制器共有三种选择，所以也就决定了蓝牙的核心规格有三种。\n\n主控制器为BR/EDR Controller：那么蓝牙核心规格就是单模蓝牙模块，也就是我们经常说的传统蓝牙模块\n主控制器为LE Controller：那么蓝牙核心规格也是单模蓝牙模块，是我们经常说的BLE蓝牙模块\n主控制器为BR/EDR和LE Controller结合成的controller：那么蓝牙核心规格就是双模蓝牙模块，是既支持传统蓝牙功能又支持BLE低功耗蓝牙功能\n\n","categories":["蓝牙"],"tags":["蓝牙","物联网","BLE"]}]